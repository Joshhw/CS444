Script started on Sun 11 Oct 2015 02:06:32 PM EDT
joshhw@itserver6:~/cs444/hw1/class_hw1$ cat names
Team Dog Vomit:
Thomas Martin
Joshua Decosta
joshhw@itserver6:~/cs444/hw1/class_hw1$ ls 
hw1.doc      makefile		   syms			   tty.c
io.c	     names		   testio.c		   tty.h
ioconf.c     part2		   testio.lnx		   tty.opc
ioconf.h     part2text		   testio.opc		   tty_public.h
ioconf.opc   queue		   testio-orig.script
io.opc	     README		   testio-orig.script.txt
io_public.h  remgdb-testio.script  testio.syms
joshhw@itserver6:~/cs444/hw1/class_hw1$ cat tty.c
/*********************************************************************
*
*       file:           tty.c
*       author:         betty o'neil
*
*       tty driver--device-specific routines for ttys 
*
*/
#include <stdio.h>  /* for kprintf prototype */
#include <serial.h>
#include <cpu.h>
#include <pic.h>
#include "ioconf.h"
#include "tty_public.h"
#include "tty.h"
#include "queue/queue.h"

struct tty ttytab[NTTYS];        /* software params/data for each SLU dev */

/* tell C about the assembler shell routines */
extern void irq3inthand(void), irq4inthand(void);

/* C part of interrupt handlers--specific names called by the assembler code */
extern void irq3inthandc(void), irq4inthandc(void); 

/* the common code for the two interrupt handlers */                           
static void irqinthandc(int dev); 



/* external queues to be shared, possibly */
Queue inqueue;		/* creating a queue to read */
Queue outqueue;		/* create local queue to write */
Queue echoqueue;	/* create echo queue */
Queue *rqueue = &inqueue;		/* creating a queue pointer to read */
Queue *wqueue = &outqueue;		/* creating a queue pointer to write */
Queue *equeue = &echoqueue;		/* creating a queue pointer to echo */
/*====================================================================
*
*       tty specific initialization routine for COM devices
*
*/

void ttyinit(int dev)
{
  int baseport;
  struct tty *tty;		/* ptr to tty software params/data block */
  init_queue(rqueue, 6); /* create the queue for read */
  init_queue(wqueue, 6); /* create the queue for write */
  init_queue(equeue, 6); /* create the queue for echo */
  baseport = devtab[dev].dvbaseport; /* pick up hardware addr */
  tty = (struct tty *)devtab[dev].dvdata; /* and software params struct */

  if (baseport == COM1_BASE) {
      /* arm interrupts by installing int vec */
      set_intr_gate(COM1_IRQ+IRQ_TO_INT_N_SHIFT, &irq4inthand);
      pic_enable_irq(COM1_IRQ);
  } else if (baseport == COM2_BASE) {
      /* arm interrupts by installing int vec */
      set_intr_gate(COM2_IRQ+IRQ_TO_INT_N_SHIFT, &irq3inthand);
      pic_enable_irq(COM2_IRQ);
  } else {
      kprintf("Bad TTY device table entry, dev %d\n", dev);
      return;			/* give up */
  }
  tty->echoflag = 1;		/* default to echoing */
  tty->rin = 0;               /* initialize indices */
  tty->rout = 0;
  tty->rnum = 0;              /* initialize counter */
  tty->tin = 0;               /* initialize indices */
  tty->tout = 0;
  tty->tnum = 0;              /* initialize counter */

  /* enable interrupts on receiver */
  outpt(baseport+UART_IER, UART_IER_RDI); /* RDI = receiver data int */
}


/*====================================================================
*
*       Useful function when emptying/filling the read/write buffers
*
*/

#define min(x,y) (x < y ? x : y)


/*====================================================================
*
*       tty-specific read routine for TTY devices
*
*/

int ttyread(int dev, char *buf, int nchar)
{
  int baseport;
  struct tty *tty;
  int i;
  int saved_eflags;        /* old cpu control/status reg, so can restore it */


  baseport = devtab[dev].dvbaseport; /* hardware addr from devtab */
  tty = (struct tty *)devtab[dev].dvdata;   /* software data for line */
  for (i = 0; i < nchar; i++) {
    saved_eflags = get_eflags();
    cli();									/* disable ints in CPU */
	if(queuecount(rqueue) != 0) {			/* check the read queue has characters */
		buf[i] = dequeue(rqueue);			/*insert char from the queue to the user buf */
	} else {
		i--;								/*decrement the count and keep looping */
	}
    set_eflags(saved_eflags);     /* back to previous CPU int. status */
  }

  return nchar;       /* corrected*/
}


/*====================================================================
*
*       tty-specific write routine for SAPC devices
*       (cs444: note that the buffer tbuf is superfluous in this code, but
*        it still gives you a hint as to what needs to be done for
*        the interrupt-driven case)
*
*/

int ttywrite(int dev, char *buf, int nchar)
{
  char ch;
  int baseport;
  struct tty *tty;
  int i, saved_eflags;

  baseport = devtab[dev].dvbaseport; 		/* hardware addr from devtab */
  tty = (struct tty *)devtab[dev].dvdata;   /* software data for line */

  for (i=0; i < nchar; i++) {
	saved_eflags = get_eflags();										/* save the eflags */
	cli();
	if((ch = enqueue(wqueue, buf[i])) == -1) {							/*if the write queue is full, decrement counter to acquire more chars */
		i--;
	} else {
		outpt(baseport+UART_IER, UART_IER_RDI |  UART_IER_THRI);		/*else if the write queue is not full*/
																		/*output the char by turning on the transmit holding interrupt */ 
	}
	

	set_eflags(saved_eflags);											/* restore the saved eflags */
  }

  while(queuecount(wqueue) != 0) {
	outpt(baseport+UART_IER, UART_IER_RDI | UART_IER_THRI);				/* continuously turn on interrupts until wqueue is empty. VM Int fix */
  }
  outpt(baseport+UART_IER, UART_IER_RDI);				/* we iz done with TX, let us shut it DOWN! */
  return nchar;
}

/*====================================================================
*
*       tty-specific control routine for TTY devices
*
*/

int ttycontrol(int dev, int fncode, int val)
{
  struct tty *this_tty = (struct tty *)(devtab[dev].dvdata);

  if (fncode == ECHOCONTROL)
    this_tty->echoflag = val;
  else return -1;
  return 0;
}



/*====================================================================
*
*       tty-specific interrupt routine for COM ports
*
*   Since interrupt handlers don't have parameters, we have two different
*   handlers.  However, all the common code has been placed in a helper 
*   function.
*/
  
void irq4inthandc()
{
  irqinthandc(TTY0);
}                              
  
void irq3inthandc()
{
  irqinthandc(TTY1);
}                              

void irqinthandc(int dev){  
  int ch,status;
  struct tty *tty = (struct tty *)(devtab[dev].dvdata);
  int baseport = devtab[dev].dvbaseport; /* hardware i/o port */;

  
  pic_end_int();                										/* notify PIC that its part is done */
  status = inpt(baseport+UART_LSR);										/* gets Line Status Register to enquire about said status */

  if((status&UART_LSR_DR) != 0) {  									/*LSR is in recieve mode, take in characters */
 	  ch = inpt(baseport+UART_RX);										/* read char, ack the device */
	if (tty->echoflag == 1)												/*if echo flag is on, enqueue chars onto echo queue */
	  enqueue(equeue, ch);												/* enqueue char onto echo queue */
    enqueue(rqueue, ch);												/* enqueue char onto read queue be default FOREVER! */
  }
  if ((status&UART_LSR_THRE) != 0) { 									/* transmit mode, dequeue until no more characters */
	  if ((ch = dequeue(equeue)) != -1) {  								/*this means the echo queue is NOT empty */
	  	outpt(baseport+UART_TX, ch); 									/*output character from echo queue */
	  } 
	  if ((ch = dequeue(wqueue)) != -1) { 								/*this means the write queue is NOT empty */
		outpt(baseport+UART_TX, ch);									/* output the character since its there */
	  }
	  	outpt(baseport+UART_IER, UART_IER_RDI); 						/*disable transmit interrupt, and leave recieve enabled */
  }
}
joshhw@itserver6:~/cs444/hw1/class_hw1$ cat part2text
Script started on Sun 11 Oct 2015 01:42:11 PM EDT
tuser@tutor-vserver:~/thing/hw1$ exit[2Plsexitmtip -f testio.lnx
For command help, type ~?
For help on args, rerun without args
Code starts at 0x100100
Using board # 1 
Please type <CR> to confirm console setting: 
Setting console dev to COM2Console: colour EGA+ 80x25
COM1 at 0x03f8 (irq = 4) is a 16550A
COM2 at 0x02f8 (irq = 3) is a 16550A

                 Welcome to UMB Tutor for the PC
   UMB Tutor is a 32-bit protected-mode PC debugger/downloader,
       based on Linux, UMB Tutor for m68k, and remote gdb.
UMB Tutor is free software and you are welcome to distribute copies
of it under certain conditions.  There is no warranty for this program.
The copyright and warranty provisions follow the Gnu general public
license, available for view in gdb and elsewhere.  Full sources available.
--bugs, suggestions, questions to eoneil@cs.umb.edu

Exception 3 at EIP=00057a9b: Breakpoint
Tutor> ~downloading testio.lnx

........Done.

Download done, setting EIP to 100100.
Tutor> go 100100
Running with device TTY1

Trying simple write...
hi!
write of 4 returned 4
<doing delay>
Trying longer write
abcdefghiwrite of 9 returned 9
<doing delay>

Trying write of 80-char string...
AABBCCDDEEFFGGHHIIJJKKLLMMNNOOPPQQRRSSTTUUVVWWXXYYZZ[[\\]]^^__``aabbccddeeffgghh
write returned 80
<doing delay>

Type some input to test typeahead while looping for delay...
<doing delay>
thiknabout
Got 10 chars into buf. Trying write of buf...
thiknabout
Trying another read right away...
thingstodo
Got 10 chars on second read
thingstodo

Now turning echo off--

Type some input, note lack of echoes...
<doing delay>

Trying write of buf...
thingstodowhenyourde
Asked for 20 characters; got 20
Exception 3 at EIP=00100110: Breakpoint
Tutor> ad  ~q 
Quit handler: 
killing process 4499 Leaving board #1
tuser@tutor-vserver:~/thing/hw1$ exit
exit

Script done on Sun 11 Oct 2015 01:43:49 PM EDT
joshhw@itserver6:~/cs444/hw1/class_hw1$ exit
exit

Script done on Sun 11 Oct 2015 02:07:18 PM EDT
